#Desing report

The basic tools we will be using are:

Sublime and Java for designing the program code.

Gradle will be used for automatic building and running unit tests.

Github will be used as Version Control, and our initial step is to create a repository on Github. After each TDD Mantra (Write test,  write code, refactor) we will commit our changes to Github, so that we will have our program deployable for production at all times. For automated continuous integration we will use Travis as our tool.

For templating the java code into our html file we will use Mustache, and by doing that the game can be played on localhost while the code is running on the GreenQloud machine.

We plan to implement code coverage and code ispection into our code for monitoring, and use Selenium on Heroku for end-to-end tests.

Class setup
---

In the beginning we were quite unsure of how to start this project which resulted in some code being produced without really having a solid plan.

Here is a class diagram of the code that resulted from this phase.

<img src="http://yuml.me/diagram/scruffy;dir:LR/class/[TicTacToe%7C-repo;-game%7Cmain]-1..*%3E[Game%7C-board%7CgetBoard();getPlayer();getWinner();mark()],%20[Game]++-1%3E[Board%7C%7Cmark();getCellValue();findWinner()]" />


After some consideration we made an improved version with added support for database repository
<img src="http://yuml.me/diagram/scruffy;dir:LR/class/[TicTacToe%7C-repo;-game%7Cmain]-1..*%3E[Game%7C-board%7CgetBoard();getPlayer();getWinner();mark()],%20[Game]++-1%3E[Board%7C%7Cmark();getCellValue();findWinner()],%20[TicTacToe]-%3E[Repository%7C-db%7CsaveScore()]" />

In addition there are four test classes, using Junit, one for each class. Tests will be written on the fly, before the code that it will test.